/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user_profile/update/{id}": {
    put: operations["update"];
  };
  "/user_product/update": {
    put: operations["update_1"];
  };
  "/user_post/update": {
    put: operations["update_2"];
  };
  "/products/update": {
    put: operations["update_3"];
  };
  "/messages/{messageId}": {
    put: operations["editMessage"];
    delete: operations["deleteMessage"];
  };
  "/entrepreneur_profile/update": {
    put: operations["update_4"];
  };
  "/channel/update": {
    put: operations["update_5"];
  };
  "/auth/update": {
    put: operations["update_6"];
  };
  "/users/online": {
    get: operations["getOnlineUsers"];
    post: operations["setOnline"];
  };
  "/users/offline": {
    post: operations["setOffline"];
  };
  "/users/friend-request": {
    post: operations["sendFriendRequest"];
  };
  "/users/friend-request/reject": {
    post: operations["rejectFriendRequest"];
  };
  "/users/friend-request/accept": {
    post: operations["acceptFriendRequest"];
  };
  "/users/block": {
    post: operations["blockUser"];
  };
  "/user_profile/create": {
    post: operations["create"];
  };
  "/user_product/create": {
    post: operations["create_1"];
  };
  "/user_post/create": {
    post: operations["create_2"];
  };
  "/products/create": {
    post: operations["create_3"];
  };
  "/messages/send": {
    post: operations["sendMessage"];
  };
  "/entrepreneur_profile/create": {
    post: operations["create_4"];
  };
  "/channel/join/{channelId}": {
    post: operations["joinChannel"];
  };
  "/channel/create": {
    post: operations["create_5"];
  };
  "/auth/register": {
    post: operations["register"];
  };
  "/auth/login": {
    post: operations["login"];
  };
  "/users/status": {
    get: operations["getCurrentStatus"];
    patch: operations["updateStatus"];
  };
  "/channel-membership/{channelId}/members/{userId}/role": {
    patch: operations["updateMemberRole"];
  };
  "/users/search": {
    get: operations["searchUsers"];
  };
  "/users/friends": {
    get: operations["getFriends"];
  };
  "/users/friend-requests": {
    get: operations["getFriendRequests"];
  };
  "/user_profile/search": {
    get: operations["searchByName"];
  };
  "/user_profile/search/email": {
    get: operations["searchByEmail"];
  };
  "/user_profile/read/{id}": {
    get: operations["read"];
  };
  "/user_profile/getAll": {
    get: operations["getAll"];
  };
  "/user_product/getAll": {
    get: operations["getAll_1"];
  };
  "/user_product/get/{id}": {
    get: operations["read_1"];
  };
  "/user_post/user/{userId}": {
    get: operations["getByUserId"];
  };
  "/user_post/search": {
    get: operations["searchByContent"];
  };
  "/user_post/getAll": {
    get: operations["getAll_2"];
  };
  "/user_post/get/{id}": {
    get: operations["read_2"];
  };
  "/products/read/{id}": {
    get: operations["read_3"];
  };
  "/products/getAll": {
    get: operations["getAll_3"];
  };
  "/messages/{channelId}": {
    get: operations["getMessages"];
  };
  "/entrepreneur_profile/read/{id}": {
    get: operations["read_4"];
  };
  "/entrepreneur_profile/getAll": {
    get: operations["getAll_4"];
  };
  "/channel/{channelId}/members": {
    get: operations["getChannelMembers"];
  };
  "/channel/read/{id}": {
    get: operations["read_5"];
  };
  "/channel/my-channels": {
    get: operations["getMyChannels"];
  };
  "/channel/getAll": {
    get: operations["getAll_5"];
  };
  "/channel/check-membership/{channelId}": {
    get: operations["checkMembership"];
  };
  "/channel-membership/{channelId}/members": {
    get: operations["getChannelMembers_1"];
  };
  "/channel-membership/online-users": {
    get: operations["getOnlineUsers_1"];
  };
  "/channel-membership/my-channels": {
    get: operations["getMyChannels_1"];
  };
  "/channel-membership/check-membership/{channelId}": {
    get: operations["checkMembership_1"];
  };
  "/auth/getAll": {
    get: operations["getAll_6"];
  };
  "/auth/get/{id}": {
    get: operations["read_6"];
  };
  "/users/friends/{userId}": {
    delete: operations["removeFriend"];
  };
  "/users/block/{userId}": {
    delete: operations["unblockUser"];
  };
  "/user_profile/delete/{id}": {
    delete: operations["delete"];
  };
  "/user_product/delete/{id}": {
    delete: operations["delete_1"];
  };
  "/user_post/delete/{id}": {
    delete: operations["delete_2"];
  };
  "/products/delete/{id}": {
    delete: operations["delete_3"];
  };
  "/entrepreneur_profile/delete/{id}": {
    delete: operations["delete_4"];
  };
  "/channel/leave/{channelId}": {
    delete: operations["leaveChannel"];
  };
  "/channel/delete/{id}": {
    delete: operations["delete_5"];
  };
  "/auth/delete/{id}": {
    delete: operations["delete_6"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EntrepreneurUserProfile: {
      /** Format: int64 */
      entrepreneurUserId?: number;
      user?: components["schemas"]["User"];
      sessionUrl?: string;
      biography?: string;
      userProducts?: components["schemas"]["UserProduct"][];
      commercePortfolioEnabled?: boolean;
    };
    Products: {
      /** Format: int64 */
      productId?: number;
      userProduct?: components["schemas"]["UserProduct"];
      productName?: string;
      productDescription?: string;
      /** @enum {string} */
      productReturnType?: "FULL_REFUND" | "EXCHANGE_ONLY" | "STORE_CREDIT" | "NO_RETURN" | "LIMITED_TIME_RETURN";
    };
    User: {
      /** Format: int64 */
      userId?: number;
      userFirstName?: string;
      userLastName?: string;
      userEmail?: string;
      userPassword?: string;
      /** @enum {string} */
      userRole?: "ADMIN" | "STUDENT" | "FACULTY_MEMBER" | "IT_SUPPORT_STAFF" | "GUEST" | "ENTREPRENEUR";
      studentNumber?: string;
      staffNumber?: string;
      entrepreneurProfile?: components["schemas"]["EntrepreneurUserProfile"];
      status?: string;
      avatar?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      lastSeen?: string;
      present?: boolean;
      /** Format: int64 */
      id?: number;
      online?: boolean;
      admin?: boolean;
    };
    UserProduct: {
      /** Format: int64 */
      userProductId?: number;
      entrepreneurUserProfile?: components["schemas"]["EntrepreneurUserProfile"];
      productsSet?: components["schemas"]["Products"][];
      /** @enum {string} */
      returnType?: "FULL_REFUND" | "EXCHANGE_ONLY" | "STORE_CREDIT" | "NO_RETURN" | "LIMITED_TIME_RETURN";
      productName?: string;
    };
    UserProfile: {
      /** Format: int64 */
      userProfileId?: number;
      user?: components["schemas"]["User"];
      sessionUrl?: string;
      campusDetails?: string;
      courseOfStudy?: string;
      securityOptions?: string;
      entrepreneurUserProfileEnabled?: boolean;
    };
    Channel: {
      /** Format: int64 */
      channelId?: number;
      adminCreatedChannel?: components["schemas"]["User"];
      userPosts?: components["schemas"]["UserPost"][];
      /** @enum {string} */
      channelType?: "PUBLIC_FORUM" | "PRIVATE_GROUP" | "ACADEMIC_HELP" | "SOCIAL_LOUNGE" | "EVENT_ANNOUNCEMENT";
      channelName?: string;
      permissions?: ("ALL_MEMBERS_POST" | "MEMBERS_ONLY_POST" | "MODERATED_POST" | "ADMIN_ONLY_POST" | "VIEW_ONLY_GUEST" | "NO_GUEST_VIEW" | "VIEW_ONLY_STUDENT" | "VIEW_ONLY_STUDENT_GUEST" | "ALL_MEMBERS_VIEW")[];
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      name?: string;
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      activeMemberCount?: number;
      isPrivate?: boolean;
    };
    UserPost: {
      /** Format: int64 */
      userPostId?: number;
      user?: components["schemas"]["User"];
      channelId?: components["schemas"]["Channel"];
      /** @enum {string} */
      userPostType?: "TEXT_POST" | "IMAGE_SHARE" | "VIDEO_CLIP" | "DOCUMENT_ATTACHMENT" | "POLL_QUESTION" | "EVENT_REMINDER";
      content?: string;
      /** Format: date */
      postTimestamp?: string;
      userChannelModerator?: boolean;
      moderatedPost?: boolean;
    };
    MessageRequest: {
      content?: string;
      /** Format: int64 */
      channelId?: number;
    };
    Message: {
      /** Format: int64 */
      id?: number;
      content?: string;
      author?: components["schemas"]["User"];
      channel?: components["schemas"]["Channel"];
      /** Format: date-time */
      timestamp?: string;
      /** Format: date-time */
      editedAt?: string;
      edited?: boolean;
    };
    MessageResponse: {
      message?: string;
    };
    CreateChannelRequest: {
      channelName?: string;
      name?: string;
      /** @enum {string} */
      channelType?: "PUBLIC_FORUM" | "PRIVATE_GROUP" | "ACADEMIC_HELP" | "SOCIAL_LOUNGE" | "EVENT_ANNOUNCEMENT";
      description?: string;
      isPrivate?: boolean;
      channelNameField?: string;
      /** @enum {string} */
      channelTypeField?: "PUBLIC_FORUM" | "PRIVATE_GROUP" | "ACADEMIC_HELP" | "SOCIAL_LOUNGE" | "EVENT_ANNOUNCEMENT";
    };
    LoginRequest: {
      username?: string;
      password?: string;
      userEmail?: string;
      userPassword?: string;
      emailField?: string;
      passwordField?: string;
    };
    UserStatusDto: {
      status?: string;
    };
    PageMessage: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["Message"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"][];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"][];
      paged?: boolean;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      pageNumber?: number;
      unpaged?: boolean;
    };
    SortObject: {
      direction?: string;
      nullHandling?: string;
      ascending?: boolean;
      property?: string;
      ignoreCase?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  update: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfile"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  update_1: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProduct"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProduct"];
        };
      };
    };
  };
  update_2: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPost"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"];
        };
      };
    };
  };
  update_3: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Products"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Products"];
        };
      };
    };
  };
  editMessage: {
    parameters: {
      path: {
        messageId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Message"];
        };
      };
    };
  };
  deleteMessage: {
    parameters: {
      path: {
        messageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  update_4: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntrepreneurUserProfile"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["EntrepreneurUserProfile"];
        };
      };
    };
  };
  update_5: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Channel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Channel"];
        };
      };
    };
  };
  update_6: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
    };
  };
  getOnlineUsers: {
    parameters: {
      query?: {
        channelId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  setOnline: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  setOffline: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  sendFriendRequest: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  rejectFriendRequest: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  acceptFriendRequest: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  blockUser: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  create: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfile"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  create_1: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProduct"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProduct"];
        };
      };
    };
  };
  create_2: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPost"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"];
        };
      };
    };
  };
  create_3: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Products"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Products"];
        };
      };
    };
  };
  sendMessage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  create_4: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntrepreneurUserProfile"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["EntrepreneurUserProfile"];
        };
      };
    };
  };
  joinChannel: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  create_5: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChannelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getCurrentStatus: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  updateStatus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStatusDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  updateMemberRole: {
    parameters: {
      path: {
        channelId: number;
        userId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  searchUsers: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getFriends: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getFriendRequests: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  searchByName: {
    parameters: {
      query: {
        firstName: string;
        lastName: string;
      };
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"][];
        };
      };
    };
  };
  searchByEmail: {
    parameters: {
      query: {
        email: string;
      };
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"][];
        };
      };
    };
  };
  read: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  getAll: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProfile"][];
        };
      };
    };
  };
  getAll_1: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProduct"][];
        };
      };
    };
  };
  read_1: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserProduct"];
        };
      };
    };
  };
  getByUserId: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"][];
        };
      };
    };
  };
  searchByContent: {
    parameters: {
      query: {
        content: string;
      };
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"][];
        };
      };
    };
  };
  getAll_2: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"][];
        };
      };
    };
  };
  read_2: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPost"];
        };
      };
    };
  };
  read_3: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Products"];
        };
      };
    };
  };
  getAll_3: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Products"][];
        };
      };
    };
  };
  getMessages: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageMessage"];
        };
      };
    };
  };
  read_4: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["EntrepreneurUserProfile"];
        };
      };
    };
  };
  getAll_4: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["EntrepreneurUserProfile"][];
        };
      };
    };
  };
  getChannelMembers: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"][];
        };
      };
    };
  };
  read_5: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Channel"];
        };
      };
    };
  };
  getMyChannels: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Channel"][];
        };
      };
    };
  };
  getAll_5: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Channel"][];
        };
      };
    };
  };
  checkMembership: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  getChannelMembers_1: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getOnlineUsers_1: {
    parameters: {
      query?: {
        channelId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getMyChannels_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  checkMembership_1: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getAll_6: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"][];
        };
      };
    };
  };
  read_6: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
    };
  };
  removeFriend: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  unblockUser: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  delete: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  delete_1: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  delete_2: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  delete_3: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  delete_4: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  leaveChannel: {
    parameters: {
      path: {
        channelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_5: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  delete_6: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
}
